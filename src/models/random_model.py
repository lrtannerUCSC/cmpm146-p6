from models.model import Model
from tensorflow.keras import Sequential, layers, models
#from tensorflow.keras.layers.experimental.preprocessing import Rescaling
from tensorflow.keras.optimizers import RMSprop, Adam

class RandomModel(Model):
    def _define_model(self, input_shape, categories_count):
        # Your code goes here
        # you have to initialize self.model to a keras model
        # very similar to transfered_model.py, the only difference is that you should randomize the weights
        # load your basic model with keras's load_model function
        # freeze the weights of the loaded model to make sure the training doesn't affect them
        # (check the number of total params, trainable params and non-trainable params in your summary generated by train_transfer.py)
        # randomize the weights of the loaded model, possibly by using _randomize_layers
        # use this model by removing the last layer, adding dense layers and an output layer

        # Initialize self.model to a keras model
        self.model = Sequential()

        # Load your basic model with keras's load_model function
        base_model = models.load_model('TransferModel/transfer_model.keras')
        
        # Freeze the weights of the loaded model to make sure the training doesn't affect them
        #for layer in base_model.layers:
        #    layer.trainable = False
        
        # Randomize the weights of the loaded model
        self._randomize_layers(base_model)
        
        # Removing the last layer
        for layer in base_model.layers[:-1]:
            self.model.add(layer)

        # Adding dense layers and an output layer
        self.model.add(layers.Dense(256, activation='relu', name='dense_2'))
        self.model.add(layers.Dropout(0.5, name='dropout_2'))
        self.model.add(layers.Dense(categories_count, activation='softmax', name='output_layer_2'))
    

    
    def _compile_model(self):
        # Your code goes here
        # you have to compile the keras model, similar to the example in the writeup
        self.model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])

    @staticmethod
    def _randomize_layers(model):
        # Your code goes here

        # you can write a function here to set the weights to a random value
        # use this function in _define_model to randomize the weights of your loaded model
        for layer in model.layers:
            if hasattr(layer, 'kernel_initializer') and hasattr(layer, 'bias_initializer'):
                layer.set_weights([
                    layer.kernel_initializer(shape=layer.kernel.shape),
                    layer.bias_initializer(shape=layer.bias.shape)
                ])
